// Code generated by "esc -prefix static -o static.go static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/.index.html.swp": {
		local:   "static/.index.html.swp",
		size:    12288,
		modtime: 1508978632,
		compressed: `
H4sIAAAAAAAC/+zZv27VMBQG8K/drgQYwQukQbA1LjDQwfcu/JEYEAwtomJyHDcxOMmV7Ra6cFeegwdg
4SXgFdgY2eAN0I0vC1PFVvX7LSc++eIoR8oQpd57+fRZsV/tAcB14Nvu76PX25/xaQU4PeA86qAHe47c
B6cH2dhT62U7yhiMbF3qTurKjL10egi2770Nsh29NH0z1eVJ7Z2Rbmjs+6pLvQcR/Z+ruH/v7vSq3yp3
ips3DjkSIiIiIqJLJC23sAKwvVlf2dStfyoRERERERERXVy6Ab5fA+6I/P//7/f/LwH8FMAPAXwVwBcB
fBTASgDvBPBKAA8EUIl87W3BWRIREREREdFFp2SXer/ATMl6bM4WmM1UNMEtUxGDmZft6Ks3sVwombtT
wOjhVMfCNfPy2FnfrE/n3nqjzT5KdlY3U9674W0RrJ+XMZ15GztrU1l0wR5vOpWJsZyiySVvF+3olcyH
62Zvky5Mp0O0aV4eHjzZ3V+nVb6Byk+gdh49f3hw9OJxkdd/AgAA//8suxLxADAAAA==
`,
	},

	"/gol.js": {
		local:   "static/gol.js",
		size:    3741,
		modtime: 1508984613,
		compressed: `
H4sIAAAAAAAC/7xWX2/bOBJ/tj7FQE9y4shOgL5YdYGm1+v10LsNmgJtEeSBlkYSEZoURDqyGvi7L4bU
H1ppuotdYF9sav7xN8Ph8PfIaqgEa7HWsIGnYxKQRKiUiVvDDJIQKqXX8ASHNazi1QJa+w9H6Ky3TAi3
SpXMeeHWOlU1ud/BagEruHdSg2z3TglVkyasMQsXEG7FHsPOIOcoMthAptL9DqWJCzTvBdLyuv2YRaE1
COdJENhVzLLs/SNK84lrgxLrKNypvcadesRwAXZ9o/Q8CYaIW5W1sZI1av6DELrFvykaRd3L1HAlQaPZ
VxGlNIenYOZyg41NMglmnlc0T4Kj53miIl9KrIENNFxmqom5lFh/5ZkpE6crJ7r/IC9K0ymZrj4zAxtX
mrghP1h2X6Vv2XD5tjduYAkUnucQjfI3XTSLatbA2aYPvxy9k2B2BBQarVFJRmOEZe9AVsHMx7SBJukl
DhdsCINfmqxmzViT1ByGvAo075Q0eDBReOUO2Nk0p6l3uablID6pQd50R8SL2J6AX+e8nChPCl3oUftB
MXHLf2CnwnpUvc8K/MwyvtcEMTWHWLNHpB4IAIByik3NpBbMYLSKX8EZpM0CulU5TzqnlAmMUjqnKG/g
HK7gDLCeL+AiLa2wHIXzfivBJX7tqu10XbicC3FrWkENHRY1ogw9zWdMTXThIOTNAvplubCf+YjK1OoB
h0BNyQ2GtPlyCUbt09I3+zNRrWeK0mANKa9TgS7CFgsub5gpo35rVqeRnS/dD4UqdPd5Fa/gDP7HTBnf
fDwFG/W77HhmG+KlDWgkfFFujwFqr6TC9sqpbrJPhZIJ08JWHYJZrmqIOGxglQCH13CVAD8/d/fLjkGe
YXdWHC7gMglm0wpakzN4VkdKvtN5koJm2ezooBSKCSDofxdIf+LDfL7j973FaSX9Ur6EPCo0XHi9O/NL
/MzpVz5j6W3K0ytw2R2JfWx+chH6/rUami1vBS8kaVxL+qprppFik3bHs0wMjv39th+FUFsm3oqqZFTs
+OrVyYW+tN11Ga/I/q+eSa4kzc6IortOhHMIqwNoJnU4WHEhvtC8tNnf8fuhXXo/W9yVK551qVEbVXut
7J7+DilB4hlw2csd0p/Mha1g6cMJkOcN1MW449l9/AXZ7lf9RHfft79ROv62gKno+6IfwjdW48bwSyNi
wBa91E7LpSUvf9Q4P59V5NkDHdYjwmsmxK/xncCbzpnJaR0Dy44aeqIkNvAVt7cqfUAThY1eL5chnPcM
gsgbvbVxqbShvlkWSizpQW10rOQOtWYFJdk/yhE+OkKw08Rv/nv72//jitUaSRFnzDACqBtu0hKinS5i
01boSBHTCKHLOFwHs5kjTWTT+822NbKHpLfVxCqt6b7KmMEPbIeWaZ46aZTZp4GFugN03MEPmWHO9sKs
PdExOPokbrpJ0a8s/JH5eknbpTY1lwXP29Gj6zlthxMdOGxgVF5bEjzrWe+ouCXJKQmaJkdQGh2TeLr7
E1Ct1xA6qOECqERrn6Ef5xP62XPe4Vztq9gJ4lRwlObbAsaP75MA9qH3A5BpVSPR7H+5ktM5ENuxnJ7M
YWMD2jXqu9V9TwUrpSMrHXf2P6d7D1irwwKqdqCKNabG54rXai8zLot3Nop9R+fJP80YX6aFpCVuG0XV
AS4s+lhgbuawJHwX9OjN6dWz1A/reUfVD/B64CaNG78UZhCN3NxZv4Hnxr6tQ9K6x+QVXEBUtT0eoyoL
p3RAyhMgrQekdLFbD0h5CqQdgXjGvm0wG1s2rpSOCenBNdFEQ64tdcXvAQAA//+TS+WHnQ4AAA==
`,
	},

	"/index.html": {
		local:   "static/index.html",
		size:    218,
		modtime: 1508978121,
		compressed: `
H4sIAAAAAAAC/yyPvW7DMAyEZ/spVO211g6Ulv6s7eAOGRWJtpTQdiASAfz2gSVPJL7jHXHw9vX7OV7+
vlWShVwPbXSQ0EfXdx0sKF6F5AujWP0//rx/6CpIFkI3bwSmrQekvN5VQbKaZSfkhChapYLTSYbAfPjB
nB/gusW9eoNfn55VjlZPGSlqB6axKnMo+SGKS7B63mi48XHQaA1sQWBahVcAAAD//72LSDzaAAAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    34,
		modtime: 1508987481,
		compressed: `
H4sIAAAAAAAC/0rKT6lUqObizE0sSs/Ms1IwsObiLEhMScnMSwdzarkAAQAA//8FQun8IgAAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
