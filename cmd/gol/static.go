// Code generated by "esc -prefix static -o static.go static"; DO NOT EDIT.

package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"net/http"
	"os"
	"path"
	"sync"
	"time"
)

type _escLocalFS struct{}

var _escLocal _escLocalFS

type _escStaticFS struct{}

var _escStatic _escStaticFS

type _escDirectory struct {
	fs   http.FileSystem
	name string
}

type _escFile struct {
	compressed string
	size       int64
	modtime    int64
	local      string
	isDir      bool

	once sync.Once
	data []byte
	name string
}

func (_escLocalFS) Open(name string) (http.File, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	return os.Open(f.local)
}

func (_escStaticFS) prepare(name string) (*_escFile, error) {
	f, present := _escData[path.Clean(name)]
	if !present {
		return nil, os.ErrNotExist
	}
	var err error
	f.once.Do(func() {
		f.name = path.Base(name)
		if f.size == 0 {
			return
		}
		var gr *gzip.Reader
		b64 := base64.NewDecoder(base64.StdEncoding, bytes.NewBufferString(f.compressed))
		gr, err = gzip.NewReader(b64)
		if err != nil {
			return
		}
		f.data, err = ioutil.ReadAll(gr)
	})
	if err != nil {
		return nil, err
	}
	return f, nil
}

func (fs _escStaticFS) Open(name string) (http.File, error) {
	f, err := fs.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.File()
}

func (dir _escDirectory) Open(name string) (http.File, error) {
	return dir.fs.Open(dir.name + name)
}

func (f *_escFile) File() (http.File, error) {
	type httpFile struct {
		*bytes.Reader
		*_escFile
	}
	return &httpFile{
		Reader:   bytes.NewReader(f.data),
		_escFile: f,
	}, nil
}

func (f *_escFile) Close() error {
	return nil
}

func (f *_escFile) Readdir(count int) ([]os.FileInfo, error) {
	return nil, nil
}

func (f *_escFile) Stat() (os.FileInfo, error) {
	return f, nil
}

func (f *_escFile) Name() string {
	return f.name
}

func (f *_escFile) Size() int64 {
	return f.size
}

func (f *_escFile) Mode() os.FileMode {
	return 0
}

func (f *_escFile) ModTime() time.Time {
	return time.Unix(f.modtime, 0)
}

func (f *_escFile) IsDir() bool {
	return f.isDir
}

func (f *_escFile) Sys() interface{} {
	return f
}

// FS returns a http.Filesystem for the embedded assets. If useLocal is true,
// the filesystem's contents are instead used.
func FS(useLocal bool) http.FileSystem {
	if useLocal {
		return _escLocal
	}
	return _escStatic
}

// Dir returns a http.Filesystem for the embedded assets on a given prefix dir.
// If useLocal is true, the filesystem's contents are instead used.
func Dir(useLocal bool, name string) http.FileSystem {
	if useLocal {
		return _escDirectory{fs: _escLocal, name: name}
	}
	return _escDirectory{fs: _escStatic, name: name}
}

// FSByte returns the named file from the embedded assets. If useLocal is
// true, the filesystem's contents are instead used.
func FSByte(useLocal bool, name string) ([]byte, error) {
	if useLocal {
		f, err := _escLocal.Open(name)
		if err != nil {
			return nil, err
		}
		b, err := ioutil.ReadAll(f)
		_ = f.Close()
		return b, err
	}
	f, err := _escStatic.prepare(name)
	if err != nil {
		return nil, err
	}
	return f.data, nil
}

// FSMustByte is the same as FSByte, but panics if name is not present.
func FSMustByte(useLocal bool, name string) []byte {
	b, err := FSByte(useLocal, name)
	if err != nil {
		panic(err)
	}
	return b
}

// FSString is the string version of FSByte.
func FSString(useLocal bool, name string) (string, error) {
	b, err := FSByte(useLocal, name)
	return string(b), err
}

// FSMustString is the string version of FSMustByte.
func FSMustString(useLocal bool, name string) string {
	return string(FSMustByte(useLocal, name))
}

var _escData = map[string]*_escFile{

	"/.index.html.swp": {
		local:   "static/.index.html.swp",
		size:    12288,
		modtime: 1508978632,
		compressed: `
H4sIAAAAAAAC/+zZv27VMBQG8K/drgQYwQukQbA1LjDQwfcu/JEYEAwtomJyHDcxOMmV7Ra6cFeegwdg
4SXgFdgY2eAN0I0vC1PFVvX7LSc++eIoR8oQpd57+fRZsV/tAcB14Nvu76PX25/xaQU4PeA86qAHe47c
B6cH2dhT62U7yhiMbF3qTurKjL10egi2770Nsh29NH0z1eVJ7Z2Rbmjs+6pLvQcR/Z+ruH/v7vSq3yp3
ips3DjkSIiIiIqJLJC23sAKwvVlf2dStfyoRERERERERXVy6Ab5fA+6I/P//7/f/LwH8FMAPAXwVwBcB
fBTASgDvBPBKAA8EUIl87W3BWRIREREREdFFp2SXer/ATMl6bM4WmM1UNMEtUxGDmZft6Ks3sVwombtT
wOjhVMfCNfPy2FnfrE/n3nqjzT5KdlY3U9674W0RrJ+XMZ15GztrU1l0wR5vOpWJsZyiySVvF+3olcyH
62Zvky5Mp0O0aV4eHjzZ3V+nVb6Byk+gdh49f3hw9OJxkdd/AgAA//8suxLxADAAAA==
`,
	},

	"/gol.js": {
		local:   "static/gol.js",
		size:    3955,
		modtime: 1509719502,
		compressed: `
H4sIAAAAAAAC/7xXTW/bOBM+279ioJOcyLIToBe7LtAUfft20e4GTYG2CHKgpbFEhCYFkrbsBv7viyFF
WXKc7mIX2EtCzRcfPjMcjrdMQyXYHrWBBTwd5kOSCJUxcWeZRRJCpcwMnmA3g2k6TWDv/sMBGuslE8Kv
MiVXvPBrkylN7vcwTWAKD15qka3fKaE0aSKNeZRAtBQbjBqDFUeRwwJylW3WKG1aoH0vkJY3+495HDmD
aOSta0ItsYZvuLxT2SPaOKrNbDKJ4BJqLnNVp3QYy5VMS2UsXEI0KZSYUIRhY8Hy/P0Wpf3EjUWJOo40
Gv4TowT84n+052g+dHufMV+rjcG12pKHW98qM5oPa3POFo1hBVmWTOYCP/tvgrPayIyQ9jUxbu0InoaD
tSlgAb/d/fF7WjFtnCLNmWWj+XBgam6zEuK1KVK7r9B5ZMwgRD4r0Ww4GBi0m8rZBL/BUiN7nAdbQ0l3
ppsqZxY/sDW6Qug75ZrVsVsZlPmntlziXsgcV2wj7KwjOgwP3YN6PATQ43VIYeEKaT4cdNinyIeOZ09F
vq4cYBGyzqVE/Y3ntpx7XXmi+z/yorSN0iX2ram+MNvszovUBXchYNKT9VxrLlvHGiZA+/EVxEf5m254
h3VQw8Wit+nkGIdYAhQGnWVJlsdYk56XI3Tgq7J2QBdQz4OkdDBhQZC61PnkBc4yu4MGC921d0pa3Nk4
unaXzJvUrUXdYTQrW3HZI7M+x2FQlifKHpmFOWo/KCbu+E9sVKiPqvd5gV9YzjdmPhwOMrtLDdv64qMP
q5k0gspxmr6CC8jqBJpVGWxMxgTGGWUsXtVwCdfpFC4A9SiBcVY6cdkV0wUdTBr+fQzBJX5raA92TfgV
F+LO7gV1wKjQiDLqaL5gZuOxh7SqEwjLMnGfqyNKq9UjtoHqkluMGiCuwZ45fW/r4OF5wZ19K3ghSZOh
tKi7qhtmkI5E2jXPc9E6FkItmXgrqpLBAqbp9asei1f0Koyv0mkLQUmqu5gs3blG1HerHRgmDQVdKQ0x
p1hz4PAarufALy/93XCPB88JxjVcAIcxXFFXCWf7SuXpDn/PHxJvegFhK5dqB+TgsWg0VmlHj6PNqk1W
dtn9O8lwnp4xyLjOREP8Egsub5ktW/aZzmL3SjZ/KFRhmk9fJJ+ZLdPbj/0ct/jWPO+U2PMN6Jn5qvwe
LdSgpPQF5anuZJ8KJRN2D0u1++f56DDY5uGERzp8o+tICuNT5KAUigkg6P8WSCj7dsq45w/Bos9kl8qX
kMeFgbHbyl//QZfiZ06/8jlS74582juuQkr8INawQMflOXAZ5J6FM21hKVj2GHXvyHMimhj3PH9IvyJb
v8SLGwgVteGux60yQalZfmzEt84mtOJBewMqZdLvCQVKfyTk8tIFaBHH58hyDynPYdFu+DH3LDzvdHsU
QtWOhXPnegGaz9qvAJ4gPLRVS2PvX3Xc8/2BPIlSwtGufyThjDdMCE/pr9pGC+nM3VYb66/TS10OxoC6
0z+ab/8QuuKlxtd+jMIz22mm3YnidFYswsol6/j7opU3hUM1QwT0VDfu58Qg/H44Ku5I0t/4dPqk7WqT
kjh2g7KxmsuCr/bxE9BYPIPIw4kSoGl21v2tcxidnCvM8u0I7jpzI0gzwVHa7wkcP36cBGjtq10C1b4d
upbL7sx1ozYy57J452K4TLWjFw1n1Q7GsFymAldhUMr2JN97uVXVfz6pvTyOHQlN6ZLRATLB1lUcZzsa
pKn4pumrEXXLZ5PXaT9d1cTESch9G3IcZ3uKWXZjludjlr0nsZslH2vLRAJrLhNYs53LFHWfLRPwmsTh
DaJiXXN5nNKD1ZvWL1ixnR9DNNqNlrBlgvb9MwAA//8O3V7Jcw8AAA==
`,
	},

	"/index.html": {
		local:   "static/index.html",
		size:    218,
		modtime: 1508978121,
		compressed: `
H4sIAAAAAAAC/yyPvW7DMAyEZ/spVO211g6Ulv6s7eAOGRWJtpTQdiASAfz2gSVPJL7jHXHw9vX7OV7+
vlWShVwPbXSQ0EfXdx0sKF6F5AujWP0//rx/6CpIFkI3bwSmrQekvN5VQbKaZSfkhChapYLTSYbAfPjB
nB/gusW9eoNfn55VjlZPGSlqB6axKnMo+SGKS7B63mi48XHQaA1sQWBahVcAAAD//72LSDzaAAAA
`,
	},

	"/style.css": {
		local:   "static/style.css",
		size:    34,
		modtime: 1509074295,
		compressed: `
H4sIAAAAAAAC/0rKT6lUqObizE0sSs/Ms1IwsObiLEhMScnMSwdzarkAAQAA//8FQun8IgAAAA==
`,
	},

	"/": {
		isDir: true,
		local: "static",
	},
}
